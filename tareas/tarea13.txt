-------------------------------- C -----------------------------------------------------------------
#include <stdio.h>
#include <stdint.h>

int16_t x=5;

int8_t i=2;     //prueba 1
//int8_t i=0;     //prueba 2

int main()
{
    int16_t *p=NULL;                   //<--> int16_t *p=(*void)0;  => p is a null pointer: the pointer is not pointing to any valid data
    int16_t a[3]={1,2,3};
    int16_t b[3]={4,5,6};

    p=a;
    
    b[2]=b[1]+p[i];
    
    x=p[i]+b[i];

    printf("b[2] = %d\n",b[2]);
    printf("x = %d\n",x);
    
    return 0;
}
---------------------------------------------- asm ----------------------------------------------------------
.data
    x:   .word 5                    // int16_t x   = 5
    i:   .byte 2                    // uint8_t  i  = 2   (prueba 1)
    //i: .byte 0                    // uint8_t  i  = 0   (prueba 2)
    fmtb: .string "b[2] = %d\n"     // formato b
    fmtx: .string "x = %d\n"        // formato x

.text
.global main
main:
    pushq %rbp                      // stack <-- (rbp)
    movq  %rsp, %rbp                // rbp   <-- rsp
    subq  $32, %rsp                 // rsp   <-- rsp - 32

    movq  $0, -8(%rbp)              // (p)   <-- 0

    movw  $1, -14(%rbp)             // (a[0]) <-- 1
    movw  $2, -12(%rbp)             // (a[1]) <-- 2
    movw  $3, -10(%rbp)             // (a[2]) <-- 3

    movw  $4, -20(%rbp)             // (b[0]) <-- 4
    movw  $5, -18(%rbp)             // (b[1]) <-- 5
    movw  $6, -16(%rbp)             // (b[2]) <-- 6

    leaq  -14(%rbp), %rbx           // rbx  <-- a
    movq  %rbx, -8(%rbp)            // (p)  <-- a

    movzbl i(%rip), %eax            // eax  <-- (i)
    movq   -8(%rbp), %rcx           // rcx  <-- p
    movswl (%rcx,%rax,2), %r8d      // r8d  <-- (p[i])
    movswl -18(%rbp), %r9d          // r9d  <-- (b[1])
    addl   %r8d, %r9d               // r9d  <-- (b[1]) + (p[i])
    movw   %r9w, -16(%rbp)          // (b[2]) <-- (b[1]) + (p[i])

    leaq  -20(%rbp), %r10           // r10  <-- b
    movswl (%r10,%rax,2), %r11d     // r11d <-- (b[i])
    addl   %r8d, %r11d              // r11d <-- (b[i]) + (p[i])
    movw   %r11w, x                 // (x)  <-- (b[i]) + (p[i])

    movswl -16(%rbp), %esi          // esi  <-- (b[2])
    movl   $fmtb, %edi              // edi  <-- fmtb
    movl   $0, %eax                 // eax  <-- 0
    call   printf                   // call printf

    movswl x, %esi                  // esi  <-- (x)
    movl   $fmtx, %edi              // edi  <-- fmtx
    movl   $0, %eax                 // eax  <-- 0
    call   printf                   // call printf

    xorl   %eax, %eax               // eax  <-- 0
    addq   $32, %rsp                // rsp  <-- rsp + 32
    popq   %rbp                     // rbp  <-- (stack)
    ret
